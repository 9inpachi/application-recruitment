<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>RecruitmentApp</web>
  <name>MigrationScript</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1371734726000</creationDate>
  <date>1373752487000</date>
  <contentUpdateDate>1373752487000</contentUpdateDate>
  <version>1.1</version>
  <title>MigrationScript</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import com.xpn.xwiki.doc.XWikiDocument
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.doc.XWikiAttachment

class AttachmentCopy {
	def copy(XWikiDocument destination, XWikiDocument source, XWikiContext context) {
       def sourceAttachments = source.getAttachmentList()
       if ( sourceAttachments.size() &gt; 0 ) {
			copyAttachments(destination, source, sourceAttachments, context)
       }
    }

    def copyAttachments(XWikiDocument destination, XWikiDocument source, sourceAttachments, XWikiContext context) {
       sourceAttachments.each() {
           def attachmentByteContent = source.getAttachment(it.getFilename())		
    	   destination.addAttachment(it.getFilename(), attachmentByteContent.getContentInputStream(context), context)
       }
    }
}

fileCopy = new AttachmentCopy()
{{/groovy}}
{{velocity output="off"}}
#set($importConfigDoc = $xwiki.getDocument('RecruitmentApp.ImportConfiguration'))
#set($importConfigObj = $importConfigDoc.getObject('RecruitmentApp.ImportConfiguration'))
#if( "$!request.importSpace" != "" )
	  $importConfigObj.set('space', $request.importSpace)
	  $importConfigDoc.save()   
#end

#set($space = $importConfigObj.space)

#set($results = $services.query.xwql("from doc.object(RecruitmentCode.CandidateClass) as candidate where doc.fullName &lt;&gt; 'RecruitmentCode.CandidateClassTemplate'").setWiki($space).execute())

#set($database = $xcontext.getDatabase())
$xcontext.setDatabase($space)

#foreach($candidate in $results)  
    #set($oldCandidateDoc = $xwiki.getDocument($candidate))
	#set($oldCandidateObj = $oldCandidateDoc.getObject('RecruitmentCode.CandidateClass'))
    #set($candidateFullName = $oldCandidateObj.first_name + " " + $oldCandidateObj.last_name)
	#set($newCandidateDocRef = $services.model.createDocumentReference($database, 'RecruitmentApp', $candidateFullName))
	
    #set($newCandidateDoc = $xwiki.getDocument($newCandidateDocRef))
	##check if the user exists
	#if("$!newCandidateDoc.getObject('RecruitmentApp.RecruitmentAppClass')" == '' )
		#set($newCandidateObj = $newCandidateDoc.getObject('RecruitmentApp.RecruitmentAppClass', true))
	
		$newCandidateDoc.setTitle($candidateFullName)
		$newCandidateObj.set('first_name', $oldCandidateObj.first_name)
		$newCandidateObj.set('last_name', $oldCandidateObj.last_name)
		$newCandidateObj.set('email', $oldCandidateObj.email)
		$newCandidateObj.set('skype', $oldCandidateObj.skype)
		$newCandidateObj.set('phone', $oldCandidateObj.phone)
		$newCandidateObj.set('details', $oldCandidateObj.details)
		$newCandidateObj.set('assignee', $oldCandidateObj.assignee)
	
	    ##check if the office is not empty 
		#if( "$!oldCandidateObj.office" != '')
		    ##check if the office exists
			#set($officeResult = $services.query.xwql('FROM doc.object(RecruitmentApp.OfficeClass) as office WHERE office.office = :office').bindValue('office', $oldCandidateObj.office).setWiki($database).execute())
			#if( $officeResult.size() == 0 )
				#set($officeDocName = $oldCandidateObj.office + "Office")
				#set($officeDocRef = $services.model.createDocumentReference($database, 'RecruitmentApp', $officeDocName))
				#set($officeDoc = $xwiki.getDocument($officeDocRef))
				#set($officeObj = $officeDoc.getObject('RecruitmentApp.OfficeClass', true))
				$officeObj.set('office', $oldCandidateObj.office)
				$officeDoc.save() 
			#end
			##set office for user
			$newCandidateObj.set('office', $oldCandidateObj.office)
		#end
	
		##check if the status is not empty
		#if( "$!oldCandidateObj.status" != '' )
			##check if the status exists
			#set($statusResult = $services.query.xwql('FROM doc.object(RecruitmentApp.StatusClass) as status WHERE status.status = :status').bindValue('status', $oldCandidateObj.status).setWiki($database).execute())
			#if( $statusResult.size() == 0 )
				#set($statusDocName = $oldCandidateObj.status + 'Status')
				#set($statusDocRef = $services.model.createDocumentReference($database, 'RecruitmentApp', $statusDocName))
				#set($statusDoc = $xwiki.getDocument($statusDocRef))
				#set($statusObj = $statusDoc.getObject('RecruitmentApp.StatusClass', true))
				$statusObj.set('status', $oldCandidateObj.status)
				$statusDoc.save()
			#end
			##set status for user
			$newCandidateObj.set('status', $oldCandidateObj.status) 
		#end
	
		##get all evaluations for the candidate
		#set($evaluationObjects = $oldCandidateDoc.getObjects('RecruitmentCode.EvaluationClass'))
		#if( $evaluationObjects.size() != 0 )
			#foreach( $evaluation in $evaluationObjects )
				#set($newEvaluationObject = $newCandidateDoc.newObject('RecruitmentApp.EvaluationClass'))
				$newEvaluationObject.set('evaluator', $evaluation.getProperty('evaluator').value)
				$newEvaluationObject.set('mark', $evaluation.mark)
				$newEvaluationObject.set('details', $evaluation.details)
				#set($hire = 0)
				#if( "$!evaluation.hire" != '' )
					#if( $evaluation.hire == "Yes" )
						#set($hire = 1)
					#elseif ( $evaluation.hire == "No")
						#set($hire = 2)
					#end
				#end
			    $newEvaluationObject.set('hire', $hire.toString())
			#end
		#end	
	
		$fileCopy.copy($newCandidateDoc.getDocument(), $oldCandidateDoc.getDocument(), $xcontext.getContext())
		$newCandidateDoc.save()
	#end
#end
$xcontext.setDatabase($database)
$response.sendRedirect($xwiki.getURL($request.doc, 'view', $request.query))
{{/velocity}}</content>
</xwikidoc>
